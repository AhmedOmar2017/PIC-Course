

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Aug 26 02:32:17 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0034                     _RB4	set	52
   238  0035                     _RB5	set	53
   239  0033                     _RB3	set	51
   240  0032                     _RB2	set	50
   241  0031                     _RB1	set	49
   242  0030                     _RB0	set	48
   243  0086                     _TRISB	set	134
   244  0434                     _TRISB4	set	1076
   245  0435                     _TRISB5	set	1077
   246                           
   247                           	psect	strings
   248  0003                     __pstrings:
   249  0003                     stringtab:
   250  0003                     __stringtab:
   251  0003                     stringcode:	
   252                           ;	String table - string pointers are 1 byte each
   253                           
   254  0003                     stringdir:
   255  0003  3000               	movlw	high stringdir
   256  0004  008A               	movwf	10
   257  0005  0804               	movf	4,w
   258  0006  0A84               	incf	4,f
   259  0007  0782               	addwf	2,f
   260  0008                     __stringbase:
   261  0008  3400               	retlw	0
   262  0009                     __end_of__stringtab:
   263  0009                     STR_1:
   264  0009  3448               	retlw	72	;'H'
   265  000A  3445               	retlw	69	;'E'
   266  000B  344C               	retlw	76	;'L'
   267  000C  344C               	retlw	76	;'L'
   268  000D  344F               	retlw	79	;'O'
   269  000E  342C               	retlw	44	;','
   270  000F  3420               	retlw	32	;' '
   271  0010  3457               	retlw	87	;'W'
   272  0011  344F               	retlw	79	;'O'
   273  0012  3452               	retlw	82	;'R'
   274  0013  344C               	retlw	76	;'L'
   275  0014  3444               	retlw	68	;'D'
   276  0015  3400               	retlw	0
   277  0016                     STR_2:
   278  0016  3441               	retlw	65	;'A'
   279  0017  3448               	retlw	72	;'H'
   280  0018  344D               	retlw	77	;'M'
   281  0019  3445               	retlw	69	;'E'
   282  001A  3444               	retlw	68	;'D'
   283  001B  342C               	retlw	44	;','
   284  001C  3420               	retlw	32	;' '
   285  001D  344F               	retlw	79	;'O'
   286  001E  3441               	retlw	65	;'A'
   287  001F  344D               	retlw	77	;'M'
   288  0020  3452               	retlw	82	;'R'
   289  0021  3400               	retlw	0
   290                           
   291                           	psect	cinit
   292  07FC                     start_initialization:	
   293                           ; #config settings
   294                           
   295  07FC                     __initialization:
   296  07FC                     end_of_initialization:	
   297                           ;End of C runtime variable initialization code
   298                           
   299  07FC                     __end_of__initialization:
   300  07FC  0183               	clrf	3
   301  07FD  120A  118A  2F7E   	ljmp	_main	;jump to C main() function
   302                           
   303                           	psect	cstackCOMMON
   304  0070                     __pcstackCOMMON:
   305  0070                     ?_LCD_INIT:
   306  0070                     ?_LCD_CLEAR:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_LCD_WRITE_STRING:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_LCD_SR:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_LCD_SL:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_main:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_LCD_DATA:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ??_LCD_DATA:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_LCD_CMD:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_LCD_WRITE_CHAR:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     LCD_DATA@Data:	
   334                           ; 1 bytes @ 0x0
   335                           
   336                           
   337                           ; 1 bytes @ 0x0
   338  0070                     	ds	1
   339  0071                     ??_LCD_CMD:
   340  0071                     ??_LCD_WRITE_CHAR:	
   341                           ; 1 bytes @ 0x1
   342                           
   343                           
   344                           ; 1 bytes @ 0x1
   345  0071                     	ds	1
   346  0072                     LCD_CMD@CMD:
   347  0072                     LCD_WRITE_CHAR@low4:	
   348                           ; 1 bytes @ 0x2
   349                           
   350                           
   351                           ; 1 bytes @ 0x2
   352  0072                     	ds	1
   353  0073                     ??_LCD_INIT:
   354  0073                     ??_LCD_CLEAR:	
   355                           ; 1 bytes @ 0x3
   356                           
   357  0073                     ?_LCD_SET_CORSER:	
   358                           ; 1 bytes @ 0x3
   359                           
   360  0073                     ??_LCD_SR:	
   361                           ; 1 bytes @ 0x3
   362                           
   363  0073                     ??_LCD_SL:	
   364                           ; 1 bytes @ 0x3
   365                           
   366  0073                     LCD_WRITE_CHAR@high4:	
   367                           ; 1 bytes @ 0x3
   368                           
   369  0073                     LCD_SET_CORSER@c:	
   370                           ; 1 bytes @ 0x3
   371                           
   372                           
   373                           ; 1 bytes @ 0x3
   374  0073                     	ds	1
   375  0074                     ??_LCD_SET_CORSER:
   376  0074                     LCD_WRITE_CHAR@data:	
   377                           ; 1 bytes @ 0x4
   378                           
   379                           
   380                           ; 1 bytes @ 0x4
   381  0074                     	ds	1
   382  0075                     ??_LCD_WRITE_STRING:
   383  0075                     LCD_WRITE_STRING@i:	
   384                           ; 1 bytes @ 0x5
   385                           
   386                           
   387                           ; 2 bytes @ 0x5
   388  0075                     	ds	1
   389  0076                     LCD_SET_CORSER@r:
   390                           
   391                           ; 1 bytes @ 0x6
   392  0076                     	ds	1
   393  0077                     LCD_WRITE_STRING@str:
   394  0077                     LCD_SET_CORSER@low4:	
   395                           ; 1 bytes @ 0x7
   396                           
   397                           
   398                           ; 1 bytes @ 0x7
   399  0077                     	ds	1
   400  0078                     LCD_SET_CORSER@high4:
   401                           
   402                           ; 1 bytes @ 0x8
   403  0078                     	ds	1
   404  0079                     LCD_SET_CORSER@temp:
   405                           
   406                           ; 1 bytes @ 0x9
   407  0079                     	ds	1
   408  007A                     ??_main:
   409                           
   410                           ; 1 bytes @ 0xA
   411  007A                     	ds	3
   412                           
   413                           	psect	cstackBANK0
   414  0020                     __pcstackBANK0:
   415  0020                     main@i:
   416                           
   417                           ; 2 bytes @ 0x0
   418  0020                     	ds	2
   419  0022                     main@i_63:
   420                           
   421                           ; 2 bytes @ 0x2
   422  0022                     	ds	2
   423                           
   424                           	psect	maintext
   425  077E                     __pmaintext:	
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 13 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;  i               2    2[BANK0 ] int 
   436 ;;  i               2    0[BANK0 ] int 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : B00/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   446 ;;      Params:         0       0       0       0       0
   447 ;;      Locals:         0       4       0       0       0
   448 ;;      Temps:          3       0       0       0       0
   449 ;;      Totals:         3       4       0       0       0
   450 ;;Total ram usage:        7 bytes
   451 ;; Hardware stack levels required when called: 3
   452 ;; This function calls:
   453 ;;		_LCD_CLEAR
   454 ;;		_LCD_INIT
   455 ;;		_LCD_SET_CORSER
   456 ;;		_LCD_SL
   457 ;;		_LCD_SR
   458 ;;		_LCD_WRITE_STRING
   459 ;; This function is called by:
   460 ;;		Startup code after reset
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464  077E                     _main:	
   465                           ;psect for function _main
   466                           
   467  077E                     l940:	
   468                           ;incstack = 0
   469                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   470                           
   471                           
   472                           ;main.c: 14:      LCD_INIT();
   473  077E  120A  118A  271C  120A  118A  	fcall	_LCD_INIT
   474                           
   475                           ;main.c: 15:      LCD_CLEAR();
   476  0783  120A  118A  2604  120A  118A  	fcall	_LCD_CLEAR
   477                           
   478                           ;main.c: 16:      LCD_SET_CORSER(1, 1);
   479  0788  01F3               	clrf	LCD_SET_CORSER@c
   480  0789  0AF3               	incf	LCD_SET_CORSER@c,f
   481  078A  3001               	movlw	1
   482  078B  120A  118A  26CB  120A  118A  	fcall	_LCD_SET_CORSER
   483  0790                     l942:
   484                           
   485                           ;main.c: 17:      LCD_WRITE_STRING("HELLO, WORLD");
   486  0790  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   487  0791  120A  118A  2663  120A  118A  	fcall	_LCD_WRITE_STRING
   488  0796                     l944:
   489                           
   490                           ;main.c: 18:      LCD_SET_CORSER(2, 1);
   491  0796  01F3               	clrf	LCD_SET_CORSER@c
   492  0797  0AF3               	incf	LCD_SET_CORSER@c,f
   493  0798  3002               	movlw	2
   494  0799  120A  118A  26CB  120A  118A  	fcall	_LCD_SET_CORSER
   495                           
   496                           ;main.c: 19:      LCD_WRITE_STRING("AHMED, OAMR");
   497  079E  300E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   498  079F  120A  118A  2663  120A  118A  	fcall	_LCD_WRITE_STRING
   499  07A4                     l946:
   500                           
   501                           ;main.c: 21:      {;main.c: 22:          for(int i = 0; i < 4; i++)
   502  07A4  1283               	bcf	3,5	;RP0=0, select bank0
   503  07A5  1303               	bcf	3,6	;RP1=0, select bank0
   504  07A6  01A0               	clrf	main@i
   505  07A7  01A1               	clrf	main@i+1
   506  07A8                     l952:
   507                           
   508                           ;main.c: 23:          {;main.c: 24:              _delay((unsigned long)((300)*(4000000/4
      +                          000.0)));
   509  07A8  3002               	movlw	2
   510  07A9  00FC               	movwf	??_main+2
   511  07AA  3086               	movlw	134
   512  07AB  00FB               	movwf	??_main+1
   513  07AC  3099               	movlw	153
   514  07AD  00FA               	movwf	??_main
   515  07AE                     u257:
   516  07AE  0BFA               	decfsz	??_main,f
   517  07AF  2FAE               	goto	u257
   518  07B0  0BFB               	decfsz	??_main+1,f
   519  07B1  2FAE               	goto	u257
   520  07B2  0BFC               	decfsz	??_main+2,f
   521  07B3  2FAE               	goto	u257
   522  07B4                     l954:
   523                           
   524                           ;main.c: 25:              LCD_SR();
   525  07B4  120A  118A  261E  120A  118A  	fcall	_LCD_SR
   526  07B9                     l956:
   527                           
   528                           ;main.c: 26:          }
   529  07B9  3001               	movlw	1
   530  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   531  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   532  07BC  07A0               	addwf	main@i,f
   533  07BD  1803               	skipnc
   534  07BE  0AA1               	incf	main@i+1,f
   535  07BF  3000               	movlw	0
   536  07C0  07A1               	addwf	main@i+1,f
   537  07C1                     l958:
   538  07C1  0821               	movf	main@i+1,w
   539  07C2  3A80               	xorlw	128
   540  07C3  00FF               	movwf	btemp+1
   541  07C4  3080               	movlw	128
   542  07C5  027F               	subwf	btemp+1,w
   543  07C6  1D03               	skipz
   544  07C7  2FCA               	goto	u235
   545  07C8  3004               	movlw	4
   546  07C9  0220               	subwf	main@i,w
   547  07CA                     u235:
   548  07CA  1C03               	skipc
   549  07CB  2FCD               	goto	u231
   550  07CC  2FCE               	goto	u230
   551  07CD                     u231:
   552  07CD  2FA8               	goto	l952
   553  07CE                     u230:
   554  07CE                     l960:
   555                           
   556                           ;main.c: 27:          for(int i = 0; i < 4; i++)
   557  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   558  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   559  07D0  01A2               	clrf	main@i_63
   560  07D1  01A3               	clrf	main@i_63+1
   561  07D2                     l966:
   562                           
   563                           ;main.c: 28:          {;main.c: 29:              _delay((unsigned long)((300)*(4000000/4
      +                          000.0)));
   564  07D2  3002               	movlw	2
   565  07D3  00FC               	movwf	??_main+2
   566  07D4  3086               	movlw	134
   567  07D5  00FB               	movwf	??_main+1
   568  07D6  3099               	movlw	153
   569  07D7  00FA               	movwf	??_main
   570  07D8                     u267:
   571  07D8  0BFA               	decfsz	??_main,f
   572  07D9  2FD8               	goto	u267
   573  07DA  0BFB               	decfsz	??_main+1,f
   574  07DB  2FD8               	goto	u267
   575  07DC  0BFC               	decfsz	??_main+2,f
   576  07DD  2FD8               	goto	u267
   577  07DE                     l968:
   578                           
   579                           ;main.c: 30:              LCD_SL();
   580  07DE  120A  118A  2611  120A  118A  	fcall	_LCD_SL
   581  07E3                     l970:
   582                           
   583                           ;main.c: 31:          }
   584  07E3  3001               	movlw	1
   585  07E4  1283               	bcf	3,5	;RP0=0, select bank0
   586  07E5  1303               	bcf	3,6	;RP1=0, select bank0
   587  07E6  07A2               	addwf	main@i_63,f
   588  07E7  1803               	skipnc
   589  07E8  0AA3               	incf	main@i_63+1,f
   590  07E9  3000               	movlw	0
   591  07EA  07A3               	addwf	main@i_63+1,f
   592  07EB                     l972:
   593  07EB  0823               	movf	main@i_63+1,w
   594  07EC  3A80               	xorlw	128
   595  07ED  00FF               	movwf	btemp+1
   596  07EE  3080               	movlw	128
   597  07EF  027F               	subwf	btemp+1,w
   598  07F0  1D03               	skipz
   599  07F1  2FF4               	goto	u245
   600  07F2  3004               	movlw	4
   601  07F3  0222               	subwf	main@i_63,w
   602  07F4                     u245:
   603  07F4  1C03               	skipc
   604  07F5  2FF7               	goto	u241
   605  07F6  2FF8               	goto	u240
   606  07F7                     u241:
   607  07F7  2FD2               	goto	l966
   608  07F8                     u240:
   609  07F8  2FA4               	goto	l946
   610  07F9  120A  118A  2800   	ljmp	start
   611  07FC                     __end_of_main:
   612                           
   613                           	psect	text1
   614  0663                     __ptext1:	
   615 ;; *************** function _LCD_WRITE_STRING *****************
   616 ;; Defined at:
   617 ;;		line 83 in file "LCD.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  str             1    wreg     PTR unsigned char 
   620 ;;		 -> STR_2(12), STR_1(13), 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  str             1    7[COMMON] PTR unsigned char 
   623 ;;		 -> STR_2(12), STR_1(13), 
   624 ;;  i               2    5[COMMON] int 
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         0       0       0       0       0
   635 ;;      Locals:         3       0       0       0       0
   636 ;;      Temps:          0       0       0       0       0
   637 ;;      Totals:         3       0       0       0       0
   638 ;;Total ram usage:        3 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; Hardware stack levels required when called: 2
   641 ;; This function calls:
   642 ;;		_LCD_WRITE_CHAR
   643 ;; This function is called by:
   644 ;;		_main
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648  0663                     _LCD_WRITE_STRING:	
   649                           ;psect for function _LCD_WRITE_STRING
   650                           
   651                           
   652                           ;incstack = 0
   653                           ; Regs used in _LCD_WRITE_STRING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   654                           ;LCD_WRITE_STRING@str stored from wreg
   655  0663  00F7               	movwf	LCD_WRITE_STRING@str
   656  0664                     l928:
   657                           
   658                           ;LCD.c: 83: void LCD_WRITE_STRING(char* str);LCD.c: 84: {;LCD.c: 85:     int i;;LCD.c: 8
      +                          6:     for(i = 0;str[i] != '\0';i++)
   659  0664  01F5               	clrf	LCD_WRITE_STRING@i
   660  0665  01F6               	clrf	LCD_WRITE_STRING@i+1
   661  0666  2E7A               	goto	l934
   662  0667                     l930:
   663                           
   664                           ;LCD.c: 87:     {;LCD.c: 88:         LCD_WRITE_CHAR(str[i]);
   665  0667  0875               	movf	LCD_WRITE_STRING@i,w
   666  0668  0777               	addwf	LCD_WRITE_STRING@str,w
   667  0669  0084               	movwf	4
   668  066A  120A  118A  2003  120A  118A  	fcall	stringdir
   669  066F  120A  118A  2688  120A  118A  	fcall	_LCD_WRITE_CHAR
   670  0674                     l932:
   671                           
   672                           ;LCD.c: 89:     }
   673  0674  3001               	movlw	1
   674  0675  07F5               	addwf	LCD_WRITE_STRING@i,f
   675  0676  1803               	skipnc
   676  0677  0AF6               	incf	LCD_WRITE_STRING@i+1,f
   677  0678  3000               	movlw	0
   678  0679  07F6               	addwf	LCD_WRITE_STRING@i+1,f
   679  067A                     l934:
   680  067A  0875               	movf	LCD_WRITE_STRING@i,w
   681  067B  0777               	addwf	LCD_WRITE_STRING@str,w
   682  067C  0084               	movwf	4
   683  067D  120A  118A  2003  120A  118A  	fcall	stringdir
   684  0682  3A00               	xorlw	0
   685  0683  1D03               	skipz
   686  0684  2E86               	goto	u221
   687  0685  2E87               	goto	u220
   688  0686                     u221:
   689  0686  2E67               	goto	l930
   690  0687                     u220:
   691  0687                     l72:
   692  0687  0008               	return
   693  0688                     __end_of_LCD_WRITE_STRING:
   694                           
   695                           	psect	text2
   696  0688                     __ptext2:	
   697 ;; *************** function _LCD_WRITE_CHAR *****************
   698 ;; Defined at:
   699 ;;		line 64 in file "LCD.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;  data            1    wreg     unsigned char 
   702 ;; Auto vars:     Size  Location     Type
   703 ;;  data            1    4[COMMON] unsigned char 
   704 ;;  high4           1    3[COMMON] unsigned char 
   705 ;;  low4            1    2[COMMON] unsigned char 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0, pclath, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   715 ;;      Params:         0       0       0       0       0
   716 ;;      Locals:         3       0       0       0       0
   717 ;;      Temps:          1       0       0       0       0
   718 ;;      Totals:         4       0       0       0       0
   719 ;;Total ram usage:        4 bytes
   720 ;; Hardware stack levels used: 1
   721 ;; Hardware stack levels required when called: 1
   722 ;; This function calls:
   723 ;;		_LCD_DATA
   724 ;; This function is called by:
   725 ;;		_LCD_WRITE_STRING
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729  0688                     _LCD_WRITE_CHAR:	
   730                           ;psect for function _LCD_WRITE_CHAR
   731                           
   732                           
   733                           ;incstack = 0
   734                           ; Regs used in _LCD_WRITE_CHAR: [wreg+status,2+status,0+pclath+cstack]
   735                           ;LCD_WRITE_CHAR@data stored from wreg
   736  0688  00F4               	movwf	LCD_WRITE_CHAR@data
   737  0689                     l846:
   738                           
   739                           ;LCD.c: 64: void LCD_WRITE_CHAR(char data);LCD.c: 65: {;LCD.c: 66:     char low4, high4;
      +                          ;LCD.c: 67:     low4 = data & 0x0F;
   740  0689  0874               	movf	LCD_WRITE_CHAR@data,w
   741  068A  390F               	andlw	15
   742  068B  00F1               	movwf	??_LCD_WRITE_CHAR
   743  068C  0871               	movf	??_LCD_WRITE_CHAR,w
   744  068D  00F2               	movwf	LCD_WRITE_CHAR@low4
   745                           
   746                           ;LCD.c: 68:     high4 = data & 0xF0;
   747  068E  0874               	movf	LCD_WRITE_CHAR@data,w
   748  068F  39F0               	andlw	240
   749  0690  00F1               	movwf	??_LCD_WRITE_CHAR
   750  0691  0871               	movf	??_LCD_WRITE_CHAR,w
   751  0692  00F3               	movwf	LCD_WRITE_CHAR@high4
   752  0693                     l848:
   753                           
   754                           ;LCD.c: 69:     RB5 = 1;
   755  0693  1283               	bcf	3,5	;RP0=0, select bank0
   756  0694  1303               	bcf	3,6	;RP1=0, select bank0
   757  0695  1686               	bsf	6,5	;volatile
   758  0696                     l850:
   759                           
   760                           ;LCD.c: 70:     LCD_DATA(high4>>4);
   761  0696  0873               	movf	LCD_WRITE_CHAR@high4,w
   762  0697  00F1               	movwf	??_LCD_WRITE_CHAR
   763  0698  3004               	movlw	4
   764  0699                     u175:
   765  0699  1003               	clrc
   766  069A  0CF1               	rrf	??_LCD_WRITE_CHAR,f
   767  069B  3EFF               	addlw	-1
   768  069C  1D03               	skipz
   769  069D  2E99               	goto	u175
   770  069E  0871               	movf	??_LCD_WRITE_CHAR,w
   771  069F  120A  118A  2641  120A  118A  	fcall	_LCD_DATA
   772  06A4                     l852:
   773                           
   774                           ;LCD.c: 71:     RB4 = 1;
   775  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   776  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   777  06A6  1606               	bsf	6,4	;volatile
   778  06A7                     l854:
   779                           
   780                           ;LCD.c: 72:     _delay((unsigned long)((500)*(4000000/4000000.0)));
   781  06A7  30A6               	movlw	166
   782  06A8  00F1               	movwf	??_LCD_WRITE_CHAR
   783  06A9                     u277:
   784  06A9  0BF1               	decfsz	??_LCD_WRITE_CHAR,f
   785  06AA  2EA9               	goto	u277
   786  06AB  0000               	nop
   787  06AC                     l856:
   788                           
   789                           ;LCD.c: 73:     RB4 = 0;
   790  06AC  1283               	bcf	3,5	;RP0=0, select bank0
   791  06AD  1303               	bcf	3,6	;RP1=0, select bank0
   792  06AE  1206               	bcf	6,4	;volatile
   793  06AF                     l858:
   794                           
   795                           ;LCD.c: 74:     _delay((unsigned long)((500)*(4000000/4000000.0)));
   796  06AF  30A6               	movlw	166
   797  06B0  00F1               	movwf	??_LCD_WRITE_CHAR
   798  06B1                     u287:
   799  06B1  0BF1               	decfsz	??_LCD_WRITE_CHAR,f
   800  06B2  2EB1               	goto	u287
   801  06B3  0000               	nop
   802  06B4                     l860:
   803                           
   804                           ;LCD.c: 75:     LCD_DATA(low4);
   805  06B4  0872               	movf	LCD_WRITE_CHAR@low4,w
   806  06B5  120A  118A  2641  120A  118A  	fcall	_LCD_DATA
   807  06BA                     l862:
   808                           
   809                           ;LCD.c: 76:      RB4 = 1;
   810  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   811  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   812  06BC  1606               	bsf	6,4	;volatile
   813  06BD                     l864:
   814                           
   815                           ;LCD.c: 77:     _delay((unsigned long)((500)*(4000000/4000000.0)));
   816  06BD  30A6               	movlw	166
   817  06BE  00F1               	movwf	??_LCD_WRITE_CHAR
   818  06BF                     u297:
   819  06BF  0BF1               	decfsz	??_LCD_WRITE_CHAR,f
   820  06C0  2EBF               	goto	u297
   821  06C1  0000               	nop
   822  06C2                     l866:
   823                           
   824                           ;LCD.c: 78:     RB4 = 0;
   825  06C2  1283               	bcf	3,5	;RP0=0, select bank0
   826  06C3  1303               	bcf	3,6	;RP1=0, select bank0
   827  06C4  1206               	bcf	6,4	;volatile
   828  06C5                     l868:
   829                           
   830                           ;LCD.c: 79:     _delay((unsigned long)((500)*(4000000/4000000.0)));
   831  06C5  30A6               	movlw	166
   832  06C6  00F1               	movwf	??_LCD_WRITE_CHAR
   833  06C7                     u307:
   834  06C7  0BF1               	decfsz	??_LCD_WRITE_CHAR,f
   835  06C8  2EC7               	goto	u307
   836  06C9  0000               	nop
   837  06CA                     l66:
   838  06CA  0008               	return
   839  06CB                     __end_of_LCD_WRITE_CHAR:
   840                           
   841                           	psect	text3
   842  061E                     __ptext3:	
   843 ;; *************** function _LCD_SR *****************
   844 ;; Defined at:
   845 ;;		line 133 in file "LCD.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, pclath, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   859 ;;      Params:         0       0       0       0       0
   860 ;;      Locals:         0       0       0       0       0
   861 ;;      Temps:          0       0       0       0       0
   862 ;;      Totals:         0       0       0       0       0
   863 ;;Total ram usage:        0 bytes
   864 ;; Hardware stack levels used: 1
   865 ;; Hardware stack levels required when called: 2
   866 ;; This function calls:
   867 ;;		_LCD_CMD
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873  061E                     _LCD_SR:	
   874                           ;psect for function _LCD_SR
   875                           
   876  061E                     l936:	
   877                           ;incstack = 0
   878                           ; Regs used in _LCD_SR: [wreg+status,2+status,0+pclath+cstack]
   879                           
   880                           
   881                           ;LCD.c: 135:     LCD_CMD(0x01);
   882  061E  3001               	movlw	1
   883  061F  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
   884                           
   885                           ;LCD.c: 136:     LCD_CMD(0x0C);
   886  0624  300C               	movlw	12
   887  0625  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
   888  062A                     l86:
   889  062A  0008               	return
   890  062B                     __end_of_LCD_SR:
   891                           
   892                           	psect	text4
   893  0611                     __ptext4:	
   894 ;; *************** function _LCD_SL *****************
   895 ;; Defined at:
   896 ;;		line 126 in file "LCD.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, status,2, status,0, pclath, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   910 ;;      Params:         0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0
   913 ;;      Totals:         0       0       0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels used: 1
   916 ;; Hardware stack levels required when called: 2
   917 ;; This function calls:
   918 ;;		_LCD_CMD
   919 ;; This function is called by:
   920 ;;		_main
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924  0611                     _LCD_SL:	
   925                           ;psect for function _LCD_SL
   926                           
   927  0611                     l938:	
   928                           ;incstack = 0
   929                           ; Regs used in _LCD_SL: [wreg+status,2+status,0+pclath+cstack]
   930                           
   931                           
   932                           ;LCD.c: 128:     LCD_CMD(0x01);
   933  0611  3001               	movlw	1
   934  0612  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
   935                           
   936                           ;LCD.c: 129:     LCD_CMD(0x08);
   937  0617  3008               	movlw	8
   938  0618  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
   939  061D                     l83:
   940  061D  0008               	return
   941  061E                     __end_of_LCD_SL:
   942                           
   943                           	psect	text5
   944  06CB                     __ptext5:	
   945 ;; *************** function _LCD_SET_CORSER *****************
   946 ;; Defined at:
   947 ;;		line 102 in file "LCD.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;  r               1    wreg     unsigned char 
   950 ;;  c               1    3[COMMON] unsigned char 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  r               1    6[COMMON] unsigned char 
   953 ;;  temp            1    9[COMMON] unsigned char 
   954 ;;  high4           1    8[COMMON] unsigned char 
   955 ;;  low4            1    7[COMMON] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0, pclath, cstack
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   965 ;;      Params:         1       0       0       0       0
   966 ;;      Locals:         4       0       0       0       0
   967 ;;      Temps:          2       0       0       0       0
   968 ;;      Totals:         7       0       0       0       0
   969 ;;Total ram usage:        7 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; Hardware stack levels required when called: 2
   972 ;; This function calls:
   973 ;;		_LCD_CMD
   974 ;; This function is called by:
   975 ;;		_main
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979  06CB                     _LCD_SET_CORSER:	
   980                           ;psect for function _LCD_SET_CORSER
   981                           
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in _LCD_SET_CORSER: [wreg+status,2+status,0+pclath+cstack]
   985                           ;LCD_SET_CORSER@r stored from wreg
   986  06CB  00F6               	movwf	LCD_SET_CORSER@r
   987  06CC                     l908:
   988                           
   989                           ;LCD.c: 102: void LCD_SET_CORSER(unsigned char r, unsigned char c);LCD.c: 103: {;LCD.c: 
      +                          104:     unsigned char temp, low4, high4;;LCD.c: 105:     if(r == 1)
   990  06CC  0376               	decf	LCD_SET_CORSER@r,w
   991  06CD  1D03               	btfss	3,2
   992  06CE  2ED0               	goto	u181
   993  06CF  2ED1               	goto	u180
   994  06D0                     u181:
   995  06D0  2EF3               	goto	l918
   996  06D1                     u180:
   997  06D1                     l910:
   998                           
   999                           ;LCD.c: 106:     {;LCD.c: 107:         temp = 0x80 + c - 1;
  1000  06D1  0873               	movf	LCD_SET_CORSER@c,w
  1001  06D2  3E7F               	addlw	127
  1002  06D3  00F4               	movwf	??_LCD_SET_CORSER
  1003  06D4  0874               	movf	??_LCD_SET_CORSER,w
  1004  06D5  00F9               	movwf	LCD_SET_CORSER@temp
  1005                           
  1006                           ;LCD.c: 108:         high4 = temp >> 4;
  1007  06D6  0879               	movf	LCD_SET_CORSER@temp,w
  1008  06D7  00F4               	movwf	??_LCD_SET_CORSER
  1009  06D8  3004               	movlw	4
  1010  06D9                     u195:
  1011  06D9  1003               	clrc
  1012  06DA  0CF4               	rrf	??_LCD_SET_CORSER,f
  1013  06DB  3EFF               	addlw	-1
  1014  06DC  1D03               	skipz
  1015  06DD  2ED9               	goto	u195
  1016  06DE  0874               	movf	??_LCD_SET_CORSER,w
  1017  06DF  00F5               	movwf	??_LCD_SET_CORSER+1
  1018  06E0  0875               	movf	??_LCD_SET_CORSER+1,w
  1019  06E1  00F8               	movwf	LCD_SET_CORSER@high4
  1020  06E2                     l912:
  1021                           
  1022                           ;LCD.c: 109:         low4 = temp & 0x0F;
  1023  06E2  0879               	movf	LCD_SET_CORSER@temp,w
  1024  06E3  390F               	andlw	15
  1025  06E4  00F4               	movwf	??_LCD_SET_CORSER
  1026  06E5  0874               	movf	??_LCD_SET_CORSER,w
  1027  06E6  00F7               	movwf	LCD_SET_CORSER@low4
  1028  06E7                     l914:
  1029                           
  1030                           ;LCD.c: 110:         LCD_CMD(high4);
  1031  06E7  0878               	movf	LCD_SET_CORSER@high4,w
  1032  06E8  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1033  06ED                     l916:
  1034                           
  1035                           ;LCD.c: 111:         LCD_CMD(low4);
  1036  06ED  0877               	movf	LCD_SET_CORSER@low4,w
  1037  06EE  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1038  06F3                     l918:
  1039                           
  1040                           ;LCD.c: 114:     if (r == 2)
  1041  06F3  3002               	movlw	2
  1042  06F4  0676               	xorwf	LCD_SET_CORSER@r,w
  1043  06F5  1D03               	btfss	3,2
  1044  06F6  2EF8               	goto	u201
  1045  06F7  2EF9               	goto	u200
  1046  06F8                     u201:
  1047  06F8  2F1B               	goto	l80
  1048  06F9                     u200:
  1049  06F9                     l920:
  1050                           
  1051                           ;LCD.c: 115:     {;LCD.c: 116:         temp = 0xC0 + c - 1;
  1052  06F9  0873               	movf	LCD_SET_CORSER@c,w
  1053  06FA  3EBF               	addlw	191
  1054  06FB  00F4               	movwf	??_LCD_SET_CORSER
  1055  06FC  0874               	movf	??_LCD_SET_CORSER,w
  1056  06FD  00F9               	movwf	LCD_SET_CORSER@temp
  1057                           
  1058                           ;LCD.c: 117:         high4 = temp >> 4;
  1059  06FE  0879               	movf	LCD_SET_CORSER@temp,w
  1060  06FF  00F4               	movwf	??_LCD_SET_CORSER
  1061  0700  3004               	movlw	4
  1062  0701                     u215:
  1063  0701  1003               	clrc
  1064  0702  0CF4               	rrf	??_LCD_SET_CORSER,f
  1065  0703  3EFF               	addlw	-1
  1066  0704  1D03               	skipz
  1067  0705  2F01               	goto	u215
  1068  0706  0874               	movf	??_LCD_SET_CORSER,w
  1069  0707  00F5               	movwf	??_LCD_SET_CORSER+1
  1070  0708  0875               	movf	??_LCD_SET_CORSER+1,w
  1071  0709  00F8               	movwf	LCD_SET_CORSER@high4
  1072  070A                     l922:
  1073                           
  1074                           ;LCD.c: 118:         low4 = temp & 0x0F;
  1075  070A  0879               	movf	LCD_SET_CORSER@temp,w
  1076  070B  390F               	andlw	15
  1077  070C  00F4               	movwf	??_LCD_SET_CORSER
  1078  070D  0874               	movf	??_LCD_SET_CORSER,w
  1079  070E  00F7               	movwf	LCD_SET_CORSER@low4
  1080  070F                     l924:
  1081                           
  1082                           ;LCD.c: 119:         LCD_CMD(high4);
  1083  070F  0878               	movf	LCD_SET_CORSER@high4,w
  1084  0710  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1085  0715                     l926:
  1086                           
  1087                           ;LCD.c: 120:         LCD_CMD(low4);
  1088  0715  0877               	movf	LCD_SET_CORSER@low4,w
  1089  0716  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1090  071B                     l80:
  1091  071B  0008               	return
  1092  071C                     __end_of_LCD_SET_CORSER:
  1093                           
  1094                           	psect	text6
  1095  071C                     __ptext6:	
  1096 ;; *************** function _LCD_INIT *****************
  1097 ;; Defined at:
  1098 ;;		line 41 in file "LCD.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0, pclath, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1112 ;;      Params:         0       0       0       0       0
  1113 ;;      Locals:         0       0       0       0       0
  1114 ;;      Temps:          2       0       0       0       0
  1115 ;;      Totals:         2       0       0       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used: 1
  1118 ;; Hardware stack levels required when called: 2
  1119 ;; This function calls:
  1120 ;;		_LCD_CMD
  1121 ;;		_LCD_DATA
  1122 ;; This function is called by:
  1123 ;;		_main
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127  071C                     _LCD_INIT:	
  1128                           ;psect for function _LCD_INIT
  1129                           
  1130  071C                     l870:	
  1131                           ;incstack = 0
  1132                           ; Regs used in _LCD_INIT: [wreg+status,2+status,0+pclath+cstack]
  1133                           
  1134                           
  1135                           ;LCD.c: 43:     TRISB = 0x00;
  1136  071C  1683               	bsf	3,5	;RP0=1, select bank1
  1137  071D  1303               	bcf	3,6	;RP1=0, select bank1
  1138  071E  0186               	clrf	6	;volatile
  1139  071F                     l872:
  1140                           
  1141                           ;LCD.c: 44:     TRISB5 = 0;
  1142  071F  1286               	bcf	6,5	;volatile
  1143  0720                     l874:
  1144                           
  1145                           ;LCD.c: 45:     TRISB4 = 0;
  1146  0720  1206               	bcf	6,4	;volatile
  1147  0721                     l876:
  1148                           
  1149                           ;LCD.c: 46:     LCD_DATA(0x00);
  1150  0721  3000               	movlw	0
  1151  0722  120A  118A  2641  120A  118A  	fcall	_LCD_DATA
  1152  0727                     l878:
  1153                           
  1154                           ;LCD.c: 47:     _delay((unsigned long)((30)*(4000000/4000.0)));
  1155  0727  3027               	movlw	39
  1156  0728  00F4               	movwf	??_LCD_INIT+1
  1157  0729  30F5               	movlw	245
  1158  072A  00F3               	movwf	??_LCD_INIT
  1159  072B                     u317:
  1160  072B  0BF3               	decfsz	??_LCD_INIT,f
  1161  072C  2F2B               	goto	u317
  1162  072D  0BF4               	decfsz	??_LCD_INIT+1,f
  1163  072E  2F2B               	goto	u317
  1164  072F                     l880:
  1165                           
  1166                           ;LCD.c: 48:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  1167  072F  30A6               	movlw	166
  1168  0730  00F3               	movwf	??_LCD_INIT
  1169  0731                     u327:
  1170  0731  0BF3               	decfsz	??_LCD_INIT,f
  1171  0732  2F31               	goto	u327
  1172  0733  0000               	nop
  1173  0734                     l882:
  1174                           
  1175                           ;LCD.c: 49:     LCD_CMD(0x03);
  1176  0734  3003               	movlw	3
  1177  0735  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1178  073A                     l884:
  1179                           
  1180                           ;LCD.c: 50:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1181  073A  3007               	movlw	7
  1182  073B  00F4               	movwf	??_LCD_INIT+1
  1183  073C  307D               	movlw	125
  1184  073D  00F3               	movwf	??_LCD_INIT
  1185  073E                     u337:
  1186  073E  0BF3               	decfsz	??_LCD_INIT,f
  1187  073F  2F3E               	goto	u337
  1188  0740  0BF4               	decfsz	??_LCD_INIT+1,f
  1189  0741  2F3E               	goto	u337
  1190  0742                     l886:
  1191                           
  1192                           ;LCD.c: 51:     LCD_CMD(0x03);
  1193  0742  3003               	movlw	3
  1194  0743  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1195  0748                     l888:
  1196                           
  1197                           ;LCD.c: 52:     _delay((unsigned long)((150)*(4000000/4000000.0)));
  1198  0748  3031               	movlw	49
  1199  0749  00F3               	movwf	??_LCD_INIT
  1200  074A                     u347:
  1201  074A  0BF3               	decfsz	??_LCD_INIT,f
  1202  074B  2F4A               	goto	u347
  1203  074C  2F4D               	nop2
  1204  074D                     l890:
  1205                           
  1206                           ;LCD.c: 53:     LCD_CMD(0x03);
  1207  074D  3003               	movlw	3
  1208  074E  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1209  0753                     l892:
  1210                           
  1211                           ;LCD.c: 54:     LCD_CMD(0x02);
  1212  0753  3002               	movlw	2
  1213  0754  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1214  0759                     l894:
  1215                           
  1216                           ;LCD.c: 55:     LCD_CMD(0x02);
  1217  0759  3002               	movlw	2
  1218  075A  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1219  075F                     l896:
  1220                           
  1221                           ;LCD.c: 56:     LCD_CMD(0x08);
  1222  075F  3008               	movlw	8
  1223  0760  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1224  0765                     l898:
  1225                           
  1226                           ;LCD.c: 57:     LCD_CMD(0x00);
  1227  0765  3000               	movlw	0
  1228  0766  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1229  076B                     l900:
  1230                           
  1231                           ;LCD.c: 58:     LCD_CMD(0x0C);
  1232  076B  300C               	movlw	12
  1233  076C  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1234  0771                     l902:
  1235                           
  1236                           ;LCD.c: 59:     LCD_CMD(0x00);
  1237  0771  3000               	movlw	0
  1238  0772  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1239  0777                     l904:
  1240                           
  1241                           ;LCD.c: 60:     LCD_CMD(0x06);
  1242  0777  3006               	movlw	6
  1243  0778  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1244  077D                     l63:
  1245  077D  0008               	return
  1246  077E                     __end_of_LCD_INIT:
  1247                           
  1248                           	psect	text7
  1249  0604                     __ptext7:	
  1250 ;; *************** function _LCD_CLEAR *****************
  1251 ;; Defined at:
  1252 ;;		line 94 in file "LCD.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;		None
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;		None
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, status,0, pclath, cstack
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1266 ;;      Params:         0       0       0       0       0
  1267 ;;      Locals:         0       0       0       0       0
  1268 ;;      Temps:          0       0       0       0       0
  1269 ;;      Totals:         0       0       0       0       0
  1270 ;;Total ram usage:        0 bytes
  1271 ;; Hardware stack levels used: 1
  1272 ;; Hardware stack levels required when called: 2
  1273 ;; This function calls:
  1274 ;;		_LCD_CMD
  1275 ;; This function is called by:
  1276 ;;		_main
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280  0604                     _LCD_CLEAR:	
  1281                           ;psect for function _LCD_CLEAR
  1282                           
  1283  0604                     l906:	
  1284                           ;incstack = 0
  1285                           ; Regs used in _LCD_CLEAR: [wreg+status,2+status,0+pclath+cstack]
  1286                           
  1287                           
  1288                           ;LCD.c: 96:     LCD_CMD(0);
  1289  0604  3000               	movlw	0
  1290  0605  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1291                           
  1292                           ;LCD.c: 97:     LCD_CMD(1);
  1293  060A  3001               	movlw	1
  1294  060B  120A  118A  262B  120A  118A  	fcall	_LCD_CMD
  1295  0610                     l75:
  1296  0610  0008               	return
  1297  0611                     __end_of_LCD_CLEAR:
  1298                           
  1299                           	psect	text8
  1300  062B                     __ptext8:	
  1301 ;; *************** function _LCD_CMD *****************
  1302 ;; Defined at:
  1303 ;;		line 30 in file "LCD.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  CMD             1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  CMD             1    2[COMMON] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0, pclath, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1317 ;;      Params:         0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0
  1319 ;;      Temps:          1       0       0       0       0
  1320 ;;      Totals:         2       0       0       0       0
  1321 ;;Total ram usage:        2 bytes
  1322 ;; Hardware stack levels used: 1
  1323 ;; Hardware stack levels required when called: 1
  1324 ;; This function calls:
  1325 ;;		_LCD_DATA
  1326 ;; This function is called by:
  1327 ;;		_LCD_INIT
  1328 ;;		_LCD_CLEAR
  1329 ;;		_LCD_SET_CORSER
  1330 ;;		_LCD_SL
  1331 ;;		_LCD_SR
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335  062B                     _LCD_CMD:	
  1336                           ;psect for function _LCD_CMD
  1337                           
  1338                           
  1339                           ;incstack = 0
  1340                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1341                           ;LCD_CMD@CMD stored from wreg
  1342  062B  00F2               	movwf	LCD_CMD@CMD
  1343  062C                     l836:
  1344                           
  1345                           ;LCD.c: 30: void LCD_CMD(unsigned char CMD);LCD.c: 31: {;LCD.c: 32:     RB5 = 0;
  1346  062C  1283               	bcf	3,5	;RP0=0, select bank0
  1347  062D  1303               	bcf	3,6	;RP1=0, select bank0
  1348  062E  1286               	bcf	6,5	;volatile
  1349  062F                     l838:
  1350                           
  1351                           ;LCD.c: 33:     LCD_DATA(CMD);
  1352  062F  0872               	movf	LCD_CMD@CMD,w
  1353  0630  120A  118A  2641  120A  118A  	fcall	_LCD_DATA
  1354  0635                     l840:
  1355                           
  1356                           ;LCD.c: 34:     RB4 = 1;
  1357  0635  1283               	bcf	3,5	;RP0=0, select bank0
  1358  0636  1303               	bcf	3,6	;RP1=0, select bank0
  1359  0637  1606               	bsf	6,4	;volatile
  1360  0638                     l842:
  1361                           
  1362                           ;LCD.c: 35:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  1363  0638  30A6               	movlw	166
  1364  0639  00F1               	movwf	??_LCD_CMD
  1365  063A                     u357:
  1366  063A  0BF1               	decfsz	??_LCD_CMD,f
  1367  063B  2E3A               	goto	u357
  1368  063C  0000               	nop
  1369  063D                     l844:
  1370                           
  1371                           ;LCD.c: 36:     RB4 = 0;
  1372  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1373  063E  1303               	bcf	3,6	;RP1=0, select bank0
  1374  063F  1206               	bcf	6,4	;volatile
  1375  0640                     l60:
  1376  0640  0008               	return
  1377  0641                     __end_of_LCD_CMD:
  1378                           
  1379                           	psect	text9
  1380  0641                     __ptext9:	
  1381 ;; *************** function _LCD_DATA *****************
  1382 ;; Defined at:
  1383 ;;		line 15 in file "LCD.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  Data            1    wreg     unsigned char 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  Data            1    0[COMMON] unsigned char 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1397 ;;      Params:         0       0       0       0       0
  1398 ;;      Locals:         1       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0
  1400 ;;      Totals:         1       0       0       0       0
  1401 ;;Total ram usage:        1 bytes
  1402 ;; Hardware stack levels used: 1
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_LCD_CMD
  1407 ;;		_LCD_INIT
  1408 ;;		_LCD_WRITE_CHAR
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412  0641                     _LCD_DATA:	
  1413                           ;psect for function _LCD_DATA
  1414                           
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _LCD_DATA: [wreg]
  1418                           ;LCD_DATA@Data stored from wreg
  1419  0641  00F0               	movwf	LCD_DATA@Data
  1420  0642                     l826:
  1421                           
  1422                           ;LCD.c: 15: void LCD_DATA(unsigned char Data);LCD.c: 16: {;LCD.c: 17:     if (Data & 1) 
      +                          RB0 = 1;
  1423  0642  1C70               	btfss	LCD_DATA@Data,0
  1424  0643  2E45               	goto	u131
  1425  0644  2E46               	goto	u130
  1426  0645                     u131:
  1427  0645  2E4A               	goto	l49
  1428  0646                     u130:
  1429  0646                     l828:
  1430  0646  1283               	bcf	3,5	;RP0=0, select bank0
  1431  0647  1303               	bcf	3,6	;RP1=0, select bank0
  1432  0648  1406               	bsf	6,0	;volatile
  1433  0649  2E4D               	goto	l50
  1434  064A                     l49:	
  1435                           ;LCD.c: 18:     else RB0 = 0;
  1436                           
  1437  064A  1283               	bcf	3,5	;RP0=0, select bank0
  1438  064B  1303               	bcf	3,6	;RP1=0, select bank0
  1439  064C  1006               	bcf	6,0	;volatile
  1440  064D                     l50:
  1441                           
  1442                           ;LCD.c: 19:     if (Data & 2) RB1 = 1;
  1443  064D  1CF0               	btfss	LCD_DATA@Data,1
  1444  064E  2E50               	goto	u141
  1445  064F  2E51               	goto	u140
  1446  0650                     u141:
  1447  0650  2E53               	goto	l51
  1448  0651                     u140:
  1449  0651                     l830:
  1450  0651  1486               	bsf	6,1	;volatile
  1451  0652  2E54               	goto	l52
  1452  0653                     l51:	
  1453                           ;LCD.c: 20:     else RB1 = 0;
  1454                           
  1455  0653  1086               	bcf	6,1	;volatile
  1456  0654                     l52:
  1457                           
  1458                           ;LCD.c: 21:     if (Data & 4) RB2 = 1;
  1459  0654  1D70               	btfss	LCD_DATA@Data,2
  1460  0655  2E57               	goto	u151
  1461  0656  2E58               	goto	u150
  1462  0657                     u151:
  1463  0657  2E5A               	goto	l53
  1464  0658                     u150:
  1465  0658                     l832:
  1466  0658  1506               	bsf	6,2	;volatile
  1467  0659  2E5B               	goto	l54
  1468  065A                     l53:	
  1469                           ;LCD.c: 22:     else RB2 = 0;
  1470                           
  1471  065A  1106               	bcf	6,2	;volatile
  1472  065B                     l54:
  1473                           
  1474                           ;LCD.c: 23:     if (Data & 8) RB3 = 1;
  1475  065B  1DF0               	btfss	LCD_DATA@Data,3
  1476  065C  2E5E               	goto	u161
  1477  065D  2E5F               	goto	u160
  1478  065E                     u161:
  1479  065E  2E61               	goto	l55
  1480  065F                     u160:
  1481  065F                     l834:
  1482  065F  1586               	bsf	6,3	;volatile
  1483  0660  2E62               	goto	l57
  1484  0661                     l55:	
  1485                           ;LCD.c: 24:     else RB3 = 0;
  1486                           
  1487  0661  1186               	bcf	6,3	;volatile
  1488  0662                     l57:
  1489  0662  0008               	return
  1490  0663                     __end_of_LCD_DATA:
  1491  007E                     btemp	set	126	;btemp
  1492  007E                     wtemp0	set	126
  1493                           
  1494                           	psect	idloc
  1495                           
  1496                           ;Config register IDLOC0 @ 0x2000
  1497                           ;	unspecified, using default values
  1498  2000                     	org	8192
  1499  2000  3FFF               	dw	16383
  1500                           
  1501                           ;Config register IDLOC1 @ 0x2001
  1502                           ;	unspecified, using default values
  1503  2001                     	org	8193
  1504  2001  3FFF               	dw	16383
  1505                           
  1506                           ;Config register IDLOC2 @ 0x2002
  1507                           ;	unspecified, using default values
  1508  2002                     	org	8194
  1509  2002  3FFF               	dw	16383
  1510                           
  1511                           ;Config register IDLOC3 @ 0x2003
  1512                           ;	unspecified, using default values
  1513  2003                     	org	8195
  1514  2003  3FFF               	dw	16383
  1515                           
  1516                           	psect	config
  1517                           
  1518                           ;Config register CONFIG @ 0x2007
  1519                           ;	Oscillator Selection bits
  1520                           ;	FOSC = XT, XT oscillator
  1521                           ;	Watchdog Timer Enable bit
  1522                           ;	WDTE = OFF, WDT disabled
  1523                           ;	Power-up Timer Enable bit
  1524                           ;	PWRTE = ON, PWRT enabled
  1525                           ;	Brown-out Reset Enable bit
  1526                           ;	BOREN = ON, BOR enabled
  1527                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1528                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1529                           ;	Data EEPROM Memory Code Protection bit
  1530                           ;	CPD = OFF, Data EEPROM code protection off
  1531                           ;	Flash Program Memory Write Enable bits
  1532                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1533                           ;	In-Circuit Debugger Mode bit
  1534                           ;	DEBUG = 0x1, unprogrammed default
  1535                           ;	Flash Program Memory Code Protection bit
  1536                           ;	CP = OFF, Code protection off
  1537  2007                     	org	8199
  1538  2007  3F71               	dw	16241

Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_WRITE_STRING@str	PTR unsigned char  size(1) Largest target is 13
		 -> STR_2(CODE[12]), STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _main->_LCD_SET_CORSER
    _LCD_WRITE_STRING->_LCD_WRITE_CHAR
    _LCD_WRITE_CHAR->_LCD_DATA
    _LCD_SR->_LCD_CMD
    _LCD_SL->_LCD_CMD
    _LCD_SET_CORSER->_LCD_CMD
    _LCD_INIT->_LCD_CMD
    _LCD_CLEAR->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1486
                                             10 COMMON     3     3      0
                                              0 BANK0      4     4      0
                          _LCD_CLEAR
                           _LCD_INIT
                     _LCD_SET_CORSER
                             _LCD_SL
                             _LCD_SR
                   _LCD_WRITE_STRING
 ---------------------------------------------------------------------------------
 (1) _LCD_WRITE_STRING                                     3     3      0     334
                                              5 COMMON     3     3      0
                     _LCD_WRITE_CHAR
 ---------------------------------------------------------------------------------
 (2) _LCD_WRITE_CHAR                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_SR                                               0     0      0     110
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SL                                               0     0      0     110
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SET_CORSER                                       7     6      1     532
                                              3 COMMON     7     6      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_INIT                                             2     2      0     198
                                              3 COMMON     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_CLEAR                                            0     0      0     110
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_CLEAR
     _LCD_CMD
       _LCD_DATA
   _LCD_INIT
     _LCD_CMD
     _LCD_DATA
   _LCD_SET_CORSER
     _LCD_CMD
   _LCD_SL
     _LCD_CMD
   _LCD_SR
     _LCD_CMD
   _LCD_WRITE_STRING
     _LCD_WRITE_CHAR
       _LCD_DATA

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Aug 26 02:32:17 2022

         ?_LCD_WRITE_CHAR 0070                         pc 0002                        l50 064D  
                      l51 0653                        l52 0654                        l60 0640  
                      l53 065A                        l54 065B                        l55 0661  
                      l63 077D                        l80 071B                        l72 0687  
                      l57 0662                        l49 064A                        l66 06CA  
                      l75 0610                        l83 061D                        l86 062A  
                      fsr 0004         ?_LCD_WRITE_STRING 0070                       l900 076B  
                     l830 0651                       l902 0771                       l910 06D1  
                     l832 0658                       l840 0635                       l904 0777  
                     l920 06F9                       l912 06E2                       l834 065F  
                     l826 0642                       l842 0638                       l906 0604  
                     l922 070A                       l914 06E7                       l850 0696  
                     l930 0667                       l828 0646                       l844 063D  
                     l836 062C                       l924 070F                       l916 06ED  
                     l908 06CC                       l860 06B4                       l852 06A4  
                     l932 0674                       l940 077E                       l838 062F  
                     l870 071C                       l926 0715                       l918 06F3  
                     l862 06BA                       l854 06A7                       l846 0689  
                     l934 067A                       l942 0790                       l880 072F  
                     l872 071F                       l936 061E                       l864 06BD  
                     l856 06AC                       l848 0693                       l928 0664  
                     l960 07CE                       l952 07A8                       l944 0796  
                     l890 074D                       l882 0734                       l874 0720  
                     l938 0611                       l866 06C2                       l858 06AF  
                     l970 07E3                       l954 07B4                       l946 07A4  
                     l892 0753                       l884 073A                       l876 0721  
                     l868 06C5                       l972 07EB                       l956 07B9  
                     l894 0759                       l886 0742                       l878 0727  
                     l966 07D2                       l958 07C1                       l896 075F  
                     l888 0748                       l968 07DE                       l898 0765  
                     _RB0 0030                       _RB1 0031                       _RB2 0032  
                     _RB3 0033                       _RB4 0034                       _RB5 0035  
                     u200 06F9                       u201 06F8                       u130 0646  
                     u131 0645                       u140 0651                       u220 0687  
                     u141 0650                       u221 0686                       u150 0658  
                     u230 07CE                       u151 0657                       u215 0701  
                     u231 07CD                       u160 065F                       u240 07F8  
                     u161 065E                       u241 07F7                       u307 06C7  
                     u235 07CA                       u180 06D1                       u317 072B  
                     u181 06D0                       u245 07F4                       u327 0731  
                     u175 0699                       u337 073E                       u257 07AE  
                     u347 074A                       u195 06D9                       u267 07D8  
                     u357 063A                       u277 06A9                       u287 06B1  
                     u297 06BF                       fsr0 0004        ??_LCD_WRITE_STRING 0075  
         __end_of_LCD_CMD 0641                      STR_1 0009                      STR_2 0016  
                    _main 077E                      btemp 007E                      start 0000  
        __end_of_LCD_DATA 0663          __end_of_LCD_INIT 077E                     ?_main 0070  
                   _TRISB 0086                     main@i 0020                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 07FC  
            __end_of_main 07FC         __end_of_LCD_CLEAR 0611                    ??_main 007A  
               ??_LCD_CMD 0071                    _LCD_SL 0611                    _LCD_SR 061E  
                  _TRISB4 0434                    _TRISB5 0435          ??_LCD_SET_CORSER 0074  
               ?_LCD_DATA 0070                 ?_LCD_INIT 0070   __end_of__initialization 07FC  
        ??_LCD_WRITE_CHAR 0071            __pcstackCOMMON 0070                   ?_LCD_SL 0070  
                 ?_LCD_SR 0070                ??_LCD_DATA 0070                ??_LCD_INIT 0073  
     LCD_WRITE_CHAR@high4 0073                __pmaintext 077E           LCD_SET_CORSER@c 0073  
         LCD_SET_CORSER@r 0076                   _LCD_CMD 062B                __stringtab 0003  
       LCD_WRITE_STRING@i 0075                   __ptext1 0663                   __ptext2 0688  
                 __ptext3 061E                   __ptext4 0611                   __ptext5 06CB  
                 __ptext6 071C                   __ptext7 0604                   __ptext8 062B  
                 __ptext9 0641                 _LCD_CLEAR 0604      end_of_initialization 07FC  
              LCD_CMD@CMD 0072                ?_LCD_CLEAR 0070          _LCD_WRITE_STRING 0663  
          __end_of_LCD_SL 061E            __end_of_LCD_SR 062B       LCD_WRITE_STRING@str 0077  
     start_initialization 07FC                  ??_LCD_SL 0073                  ??_LCD_SR 0073  
                ?_LCD_CMD 0070               ??_LCD_CLEAR 0073                 ___latbits 0002  
           __pcstackBANK0 0020        LCD_WRITE_CHAR@data 0074        LCD_WRITE_CHAR@low4 0072  
               __pstrings 0003       LCD_SET_CORSER@high4 0078                  _LCD_DATA 0641  
                _LCD_INIT 071C  __end_of_LCD_WRITE_STRING 0688               __stringbase 0008  
      __end_of__stringtab 0009            _LCD_SET_CORSER 06CB        LCD_SET_CORSER@low4 0077  
      LCD_SET_CORSER@temp 0079            _LCD_WRITE_CHAR 0688                  main@i_63 0022  
  __end_of_LCD_SET_CORSER 071C                 stringcode 0003    __end_of_LCD_WRITE_CHAR 06CB  
         ?_LCD_SET_CORSER 0073              LCD_DATA@Data 0070                  stringdir 0003  
                stringtab 0003  
