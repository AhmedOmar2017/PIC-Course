

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Aug 22 23:29:58 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.40
    16                           ; Generated 17/11/2021 GMT
    17                           ; 
    18                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170  001E                     _ADRESH	set	30
   171  001F                     _ADCON0bits	set	31
   172  001F                     _ADCON0	set	31
   173  0015                     _CCPR1L	set	21
   174  00FA                     _GO_DONE	set	250
   175  00BD                     _CCP1X	set	189
   176  00BC                     _CCP1Y	set	188
   177  0092                     _TMR2ON	set	146
   178  0091                     _T2CKPS1	set	145
   179  0090                     _T2CKPS0	set	144
   180  00BA                     _CCP1M2	set	186
   181  00BB                     _CCP1M3	set	187
   182  009E                     _ADRESL	set	158
   183  009F                     _ADCON1	set	159
   184  0092                     _PR2	set	146
   185  043A                     _TRISC2	set	1082
   186                           
   187                           	psect	cinit
   188  07FC                     start_initialization:	
   189                           ; #config settings
   190                           
   191  07FC                     __initialization:
   192  07FC                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195  07FC                     __end_of__initialization:
   196  07FC  0183               	clrf	3
   197  07FD  120A  118A  2FA8   	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	cstackCOMMON
   200  0070                     __pcstackCOMMON:
   201  0070                     ?_PWM1_INIT:
   202  0070                     ??_PWM1_INIT:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_ADC_INIT:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ??_ADC_INIT:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_ADC_READ:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_main:	
   215                           ; 2 bytes @ 0x0
   216                           
   217                           
   218                           ; 2 bytes @ 0x0
   219  0070                     	ds	2
   220  0072                     ??_ADC_READ:
   221                           
   222                           ; 1 bytes @ 0x2
   223  0072                     	ds	2
   224  0074                     ADC_READ@ANC:
   225                           
   226                           ; 1 bytes @ 0x4
   227  0074                     	ds	1
   228  0075                     ?_PWM1_SET_DUTY:
   229  0075                     PWM1_SET_DUTY@DC:	
   230                           ; 1 bytes @ 0x5
   231                           
   232                           
   233                           ; 2 bytes @ 0x5
   234  0075                     	ds	2
   235  0077                     ??_PWM1_SET_DUTY:
   236                           
   237                           ; 1 bytes @ 0x7
   238  0077                     	ds	2
   239  0079                     ??_main:
   240                           
   241                           ; 1 bytes @ 0x9
   242  0079                     	ds	1
   243                           
   244                           	psect	maintext
   245  07A8                     __pmaintext:	
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 17 in file "main.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;		None
   256 ;; Return value:  Size  Location     Type
   257 ;;                  2   46[None  ] int 
   258 ;; Registers used:
   259 ;;		wreg, status,2, status,0, pclath, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : B00/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   265 ;;      Params:         0       0       0       0       0
   266 ;;      Locals:         0       0       0       0       0
   267 ;;      Temps:          1       0       0       0       0
   268 ;;      Totals:         1       0       0       0       0
   269 ;;Total ram usage:        1 bytes
   270 ;; Hardware stack levels required when called: 1
   271 ;; This function calls:
   272 ;;		_ADC_INIT
   273 ;;		_ADC_READ
   274 ;;		_PWM1_INIT
   275 ;;		_PWM1_SET_DUTY
   276 ;; This function is called by:
   277 ;;		Startup code after reset
   278 ;; This function uses a non-reentrant model
   279 ;;
   280                           
   281  07A8                     _main:	
   282                           ;psect for function _main
   283                           
   284  07A8                     l719:	
   285                           ;incstack = 0
   286                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   287                           
   288                           
   289                           ;main.c: 19:     PWM1_INIT();
   290  07A8  120A  118A  2778  120A  118A  	fcall	_PWM1_INIT
   291                           
   292                           ;main.c: 20:     ADC_INIT();
   293  07AD  120A  118A  276F  120A  118A  	fcall	_ADC_INIT
   294  07B2                     l47:	
   295                           ;main.c: 22:     while(1)
   296                           
   297                           
   298                           ;main.c: 23:     {;main.c: 25:         PWM1_SET_DUTY(ADC_READ(0));
   299  07B2  3000               	movlw	0
   300  07B3  120A  118A  27CC  120A  118A  	fcall	_ADC_READ
   301  07B8  0871               	movf	?_ADC_READ+1,w
   302  07B9  00F6               	movwf	PWM1_SET_DUTY@DC+1
   303  07BA  0870               	movf	?_ADC_READ,w
   304  07BB  00F5               	movwf	PWM1_SET_DUTY@DC
   305  07BC  120A  118A  2787  120A  118A  	fcall	_PWM1_SET_DUTY
   306  07C1                     l721:
   307                           
   308                           ;main.c: 26:         _delay((unsigned long)((1)*(4000000/4000.0)));
   309  07C1  30C7               	movlw	199
   310  07C2  00F9               	movwf	??_main
   311  07C3                     u137:
   312  07C3  2FC4               	nop2
   313  07C4  0BF9               	decfsz	??_main,f
   314  07C5  2FC3               	goto	u137
   315  07C6  2FC7               	nop2
   316  07C7  2FC8               	nop2
   317  07C8  2FB2               	goto	l47
   318  07C9  120A  118A  2800   	ljmp	start
   319  07CC                     __end_of_main:
   320                           
   321                           	psect	text1
   322  0787                     __ptext1:	
   323 ;; *************** function _PWM1_SET_DUTY *****************
   324 ;; Defined at:
   325 ;;		line 56 in file "main.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;  DC              2    5[COMMON] unsigned int 
   328 ;; Auto vars:     Size  Location     Type
   329 ;;		None
   330 ;; Return value:  Size  Location     Type
   331 ;;                  1    wreg      void 
   332 ;; Registers used:
   333 ;;		wreg, status,2, status,0
   334 ;; Tracked objects:
   335 ;;		On entry : 0/0
   336 ;;		On exit  : 0/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   339 ;;      Params:         2       0       0       0       0
   340 ;;      Locals:         0       0       0       0       0
   341 ;;      Temps:          2       0       0       0       0
   342 ;;      Totals:         4       0       0       0       0
   343 ;;Total ram usage:        4 bytes
   344 ;; Hardware stack levels used: 1
   345 ;; This function calls:
   346 ;;		Nothing
   347 ;; This function is called by:
   348 ;;		_main
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352  0787                     _PWM1_SET_DUTY:	
   353                           ;psect for function _PWM1_SET_DUTY
   354                           
   355  0787                     l713:	
   356                           ;incstack = 0
   357                           ; Regs used in _PWM1_SET_DUTY: [wreg+status,2+status,0]
   358                           
   359                           
   360                           ;main.c: 56: void PWM1_SET_DUTY(uint16_t DC);main.c: 57: {;main.c: 59:     if (DC < 1024
      +                          )
   361  0787  3004               	movlw	4
   362  0788  0276               	subwf	PWM1_SET_DUTY@DC+1,w
   363  0789  3000               	movlw	0
   364  078A  1903               	skipnz
   365  078B  0275               	subwf	PWM1_SET_DUTY@DC,w
   366  078C  1803               	skipnc
   367  078D  2F8F               	goto	u101
   368  078E  2F90               	goto	u100
   369  078F                     u101:
   370  078F  2FA7               	goto	l57
   371  0790                     u100:
   372  0790                     l715:
   373                           
   374                           ;main.c: 60:     {;main.c: 61:         CCP1Y = DC & 1;
   375  0790  1875               	btfsc	PWM1_SET_DUTY@DC,0
   376  0791  2F93               	goto	u111
   377  0792  2F97               	goto	u110
   378  0793                     u111:
   379  0793  1283               	bcf	3,5	;RP0=0, select bank0
   380  0794  1303               	bcf	3,6	;RP1=0, select bank0
   381  0795  1617               	bsf	23,4	;volatile
   382  0796  2F9A               	goto	u124
   383  0797                     u110:
   384  0797  1283               	bcf	3,5	;RP0=0, select bank0
   385  0798  1303               	bcf	3,6	;RP1=0, select bank0
   386  0799  1217               	bcf	23,4	;volatile
   387  079A                     u124:
   388                           
   389                           ;main.c: 62:         CCP1X = DC & 2;
   390  079A  1297               	bcf	23,5	;volatile
   391  079B                     l717:
   392                           
   393                           ;main.c: 63:         CCPR1L = DC >> 2;
   394  079B  0876               	movf	PWM1_SET_DUTY@DC+1,w
   395  079C  00F8               	movwf	??_PWM1_SET_DUTY+1
   396  079D  0875               	movf	PWM1_SET_DUTY@DC,w
   397  079E  00F7               	movwf	??_PWM1_SET_DUTY
   398  079F  1003               	clrc
   399  07A0  0CF8               	rrf	??_PWM1_SET_DUTY+1,f
   400  07A1  0CF7               	rrf	??_PWM1_SET_DUTY,f
   401  07A2  1003               	clrc
   402  07A3  0CF8               	rrf	??_PWM1_SET_DUTY+1,f
   403  07A4  0CF7               	rrf	??_PWM1_SET_DUTY,f
   404  07A5  0877               	movf	??_PWM1_SET_DUTY,w
   405  07A6  0095               	movwf	21	;volatile
   406  07A7                     l57:
   407  07A7  0008               	return
   408  07A8                     __end_of_PWM1_SET_DUTY:
   409                           
   410                           	psect	text2
   411  0778                     __ptext2:	
   412 ;; *************** function _PWM1_INIT *****************
   413 ;; Defined at:
   414 ;;		line 34 in file "main.c"
   415 ;; Parameters:    Size  Location     Type
   416 ;;		None
   417 ;; Auto vars:     Size  Location     Type
   418 ;;		None
   419 ;; Return value:  Size  Location     Type
   420 ;;                  1    wreg      void 
   421 ;; Registers used:
   422 ;;		wreg
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   428 ;;      Params:         0       0       0       0       0
   429 ;;      Locals:         0       0       0       0       0
   430 ;;      Temps:          0       0       0       0       0
   431 ;;      Totals:         0       0       0       0       0
   432 ;;Total ram usage:        0 bytes
   433 ;; Hardware stack levels used: 1
   434 ;; This function calls:
   435 ;;		Nothing
   436 ;; This function is called by:
   437 ;;		_main
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441  0778                     _PWM1_INIT:	
   442                           ;psect for function _PWM1_INIT
   443                           
   444  0778                     l659:	
   445                           ;incstack = 0
   446                           ; Regs used in _PWM1_INIT: [wreg]
   447                           
   448                           
   449                           ;main.c: 37:     CCP1M3 = 1;
   450  0778  1283               	bcf	3,5	;RP0=0, select bank0
   451  0779  1303               	bcf	3,6	;RP1=0, select bank0
   452  077A  1597               	bsf	23,3	;volatile
   453                           
   454                           ;main.c: 38:     CCP1M2 = 1;
   455  077B  1517               	bsf	23,2	;volatile
   456                           
   457                           ;main.c: 39:     TRISC2 = 0;
   458  077C  1683               	bsf	3,5	;RP0=1, select bank1
   459  077D  1303               	bcf	3,6	;RP1=0, select bank1
   460  077E  1107               	bcf	7,2	;volatile
   461  077F                     l661:
   462                           
   463                           ;main.c: 43:     PR2 = 255;
   464  077F  30FF               	movlw	255
   465  0780  0092               	movwf	18	;volatile
   466  0781                     l663:
   467                           
   468                           ;main.c: 46:     T2CKPS0 = 1;
   469  0781  1283               	bcf	3,5	;RP0=0, select bank0
   470  0782  1303               	bcf	3,6	;RP1=0, select bank0
   471  0783  1412               	bsf	18,0	;volatile
   472  0784                     l665:
   473                           
   474                           ;main.c: 47:     T2CKPS1 = 0;
   475  0784  1092               	bcf	18,1	;volatile
   476  0785                     l667:
   477                           
   478                           ;main.c: 50:     TMR2ON = 1;
   479  0785  1512               	bsf	18,2	;volatile
   480  0786                     l53:
   481  0786  0008               	return
   482  0787                     __end_of_PWM1_INIT:
   483                           
   484                           	psect	text3
   485  07CC                     __ptext3:	
   486 ;; *************** function _ADC_READ *****************
   487 ;; Defined at:
   488 ;;		line 78 in file "main.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;  ANC             1    wreg     unsigned char 
   491 ;; Auto vars:     Size  Location     Type
   492 ;;  ANC             1    4[COMMON] unsigned char 
   493 ;; Return value:  Size  Location     Type
   494 ;;                  2    0[COMMON] unsigned int 
   495 ;; Registers used:
   496 ;;		wreg, status,2, status,0
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   502 ;;      Params:         2       0       0       0       0
   503 ;;      Locals:         1       0       0       0       0
   504 ;;      Temps:          2       0       0       0       0
   505 ;;      Totals:         5       0       0       0       0
   506 ;;Total ram usage:        5 bytes
   507 ;; Hardware stack levels used: 1
   508 ;; This function calls:
   509 ;;		Nothing
   510 ;; This function is called by:
   511 ;;		_main
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515  07CC                     _ADC_READ:	
   516                           ;psect for function _ADC_READ
   517                           
   518                           
   519                           ;incstack = 0
   520                           ; Regs used in _ADC_READ: [wreg+status,2+status,0]
   521                           ;ADC_READ@ANC stored from wreg
   522  07CC  00F4               	movwf	ADC_READ@ANC
   523  07CD                     l697:
   524                           
   525                           ;main.c: 78: uint16_t ADC_READ(uint8_t ANC);main.c: 79: {;main.c: 81:     if(ANC< 0 || A
      +                          NC > 7) return 0;
   526  07CD  3008               	movlw	8
   527  07CE  0274               	subwf	ADC_READ@ANC,w
   528  07CF  1C03               	skipc
   529  07D0  2FD2               	goto	u71
   530  07D1  2FD3               	goto	u70
   531  07D2                     u71:
   532  07D2  2FD6               	goto	l703
   533  07D3                     u70:
   534  07D3                     l699:
   535  07D3  01F0               	clrf	?_ADC_READ
   536  07D4  01F1               	clrf	?_ADC_READ+1
   537  07D5  2FFB               	goto	l64
   538  07D6                     l703:
   539                           
   540                           ;main.c: 83:     ADCON0 &= 0x11000101;
   541  07D6  3001               	movlw	1
   542  07D7  00F2               	movwf	??_ADC_READ
   543  07D8  0872               	movf	??_ADC_READ,w
   544  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   545  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   546  07DB  059F               	andwf	31,f	;volatile
   547                           
   548                           ;main.c: 84:     ADCON0 |= ANC<<3;
   549  07DC  0874               	movf	ADC_READ@ANC,w	;volatile
   550  07DD  00F2               	movwf	??_ADC_READ
   551  07DE  3002               	movlw	2
   552  07DF                     u85:
   553  07DF  1003               	clrc
   554  07E0  0DF2               	rlf	??_ADC_READ,f
   555  07E1  3EFF               	addlw	-1
   556  07E2  1D03               	skipz
   557  07E3  2FDF               	goto	u85
   558  07E4  1003               	clrc
   559  07E5  0D72               	rlf	??_ADC_READ,w
   560  07E6  00F3               	movwf	??_ADC_READ+1
   561  07E7  0873               	movf	??_ADC_READ+1,w
   562  07E8  049F               	iorwf	31,f	;volatile
   563  07E9                     l705:
   564                           
   565                           ;main.c: 85:     _delay((unsigned long)((30)*(4000000/4000000.0)));
   566  07E9  3009               	movlw	9
   567  07EA  00F2               	movwf	??_ADC_READ
   568  07EB                     u147:
   569  07EB  0BF2               	decfsz	??_ADC_READ,f
   570  07EC  2FEB               	goto	u147
   571  07ED  2FEE               	nop2
   572  07EE                     l707:
   573                           
   574                           ;main.c: 86:     GO_DONE = 1;
   575  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   576  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   577  07F0  151F               	bsf	31,2	;volatile
   578  07F1                     l65:	
   579                           ;main.c: 88:     while(ADCON0bits.GO_DONE);
   580                           
   581  07F1  191F               	btfsc	31,2	;volatile
   582  07F2  2FF4               	goto	u91
   583  07F3  2FF5               	goto	u90
   584  07F4                     u91:
   585  07F4  2FF1               	goto	l65
   586  07F5                     u90:
   587  07F5                     l709:
   588                           
   589                           ;main.c: 90:     return((ADRESH<<8) + ADRESL);
   590  07F5  081E               	movf	30,w	;volatile
   591  07F6  00F1               	movwf	?_ADC_READ+1
   592  07F7  1683               	bsf	3,5	;RP0=1, select bank1
   593  07F8  1303               	bcf	3,6	;RP1=0, select bank1
   594  07F9  081E               	movf	30,w	;volatile
   595  07FA  00F0               	movwf	?_ADC_READ
   596  07FB                     l64:
   597  07FB  0008               	return
   598  07FC                     __end_of_ADC_READ:
   599                           
   600                           	psect	text4
   601  076F                     __ptext4:	
   602 ;; *************** function _ADC_INIT *****************
   603 ;; Defined at:
   604 ;;		line 70 in file "main.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   618 ;;      Params:         0       0       0       0       0
   619 ;;      Locals:         0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0
   621 ;;      Totals:         0       0       0       0       0
   622 ;;Total ram usage:        0 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; This function calls:
   625 ;;		Nothing
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631  076F                     _ADC_INIT:	
   632                           ;psect for function _ADC_INIT
   633                           
   634  076F                     l669:	
   635                           ;incstack = 0
   636                           ; Regs used in _ADC_INIT: [wreg]
   637                           
   638                           
   639                           ;main.c: 72:     ADCON0 = 0x41;
   640  076F  3041               	movlw	65
   641  0770  1283               	bcf	3,5	;RP0=0, select bank0
   642  0771  1303               	bcf	3,6	;RP1=0, select bank0
   643  0772  009F               	movwf	31	;volatile
   644                           
   645                           ;main.c: 73:     ADCON1 = 0x80;
   646  0773  3080               	movlw	128
   647  0774  1683               	bsf	3,5	;RP0=1, select bank1
   648  0775  1303               	bcf	3,6	;RP1=0, select bank1
   649  0776  009F               	movwf	31	;volatile
   650  0777                     l60:
   651  0777  0008               	return
   652  0778                     __end_of_ADC_INIT:
   653  007E                     btemp	set	126	;btemp
   654  007E                     wtemp0	set	126
   655                           
   656                           	psect	idloc
   657                           
   658                           ;Config register IDLOC0 @ 0x2000
   659                           ;	unspecified, using default values
   660  2000                     	org	8192
   661  2000  3FFF               	dw	16383
   662                           
   663                           ;Config register IDLOC1 @ 0x2001
   664                           ;	unspecified, using default values
   665  2001                     	org	8193
   666  2001  3FFF               	dw	16383
   667                           
   668                           ;Config register IDLOC2 @ 0x2002
   669                           ;	unspecified, using default values
   670  2002                     	org	8194
   671  2002  3FFF               	dw	16383
   672                           
   673                           ;Config register IDLOC3 @ 0x2003
   674                           ;	unspecified, using default values
   675  2003                     	org	8195
   676  2003  3FFF               	dw	16383
   677                           
   678                           	psect	config
   679                           
   680                           ;Config register CONFIG @ 0x2007
   681                           ;	Oscillator Selection bits
   682                           ;	FOSC = XT, XT oscillator
   683                           ;	Watchdog Timer Enable bit
   684                           ;	WDTE = OFF, WDT disabled
   685                           ;	Power-up Timer Enable bit
   686                           ;	PWRTE = ON, PWRT enabled
   687                           ;	Brown-out Reset Enable bit
   688                           ;	BOREN = ON, BOR enabled
   689                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   690                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   691                           ;	Data EEPROM Memory Code Protection bit
   692                           ;	CPD = OFF, Data EEPROM code protection off
   693                           ;	Flash Program Memory Write Enable bits
   694                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   695                           ;	In-Circuit Debugger Mode bit
   696                           ;	DEBUG = 0x1, unprogrammed default
   697                           ;	Flash Program Memory Code Protection bit
   698                           ;	CP = OFF, Code protection off
   699  2007                     	org	8199
   700  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM1_SET_DUTY
    _PWM1_SET_DUTY->_ADC_READ

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     186
                                              9 COMMON     1     1      0
                           _ADC_INIT
                           _ADC_READ
                          _PWM1_INIT
                      _PWM1_SET_DUTY
 ---------------------------------------------------------------------------------
 (1) _PWM1_SET_DUTY                                        4     2      2     142
                                              5 COMMON     4     2      2
                           _ADC_READ (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM1_INIT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_READ                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_INIT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_INIT
   _ADC_READ
   _PWM1_INIT
   _PWM1_SET_DUTY
     _ADC_READ (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Aug 22 23:29:58 2022

                     l60 0777                       l53 0786                       l47 07B2  
                     l64 07FB                       l65 07F1                       l57 07A7  
                     u70 07D3                       u71 07D2                       u90 07F5  
                     u91 07F4                       u85 07DF                      l703 07D6  
                    l705 07E9                      l713 0787                      l721 07C1  
                    l707 07EE                      l715 0790                      l709 07F5  
                    l661 077F                      l717 079B                      l663 0781  
                    l719 07A8                      l665 0784                      l667 0785  
                    l659 0778                      l669 076F                      l697 07CD  
                    l699 07D3                      u100 0790                      u101 078F  
                    u110 0797                      u111 0793                      u124 079A  
                    u137 07C3                      u147 07EB                      _PR2 0092  
       __end_of_ADC_INIT 0778         __end_of_ADC_READ 07FC                     _main 07A8  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _CCP1X 00BD                    _CCP1Y 00BC                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07CC  
                 ??_main 0079                   _ADCON0 001F                   _ADCON1 009F  
                 _CCP1M2 00BA                   _CCP1M3 00BB                   _ADRESH 001E  
                 _ADRESL 009E                   _CCPR1L 0015                   _TMR2ON 0092  
                 _TRISC2 043A        __end_of_PWM1_INIT 0787    __end_of_PWM1_SET_DUTY 07A8  
              ?_ADC_INIT 0070                ?_ADC_READ 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               ??_ADC_INIT 0070               ??_ADC_READ 0072  
             __pmaintext 07A8                  _T2CKPS0 0090                  _T2CKPS1 0091  
                _GO_DONE 00FA                  __ptext1 0787                  __ptext2 0778  
                __ptext3 07CC                  __ptext4 076F     end_of_initialization 07FC  
              _PWM1_INIT 0778               ?_PWM1_INIT 0070      start_initialization 07FC  
        PWM1_SET_DUTY@DC 0075                ___latbits 0002              ADC_READ@ANC 0074  
            ??_PWM1_INIT 0070            _PWM1_SET_DUTY 0787                 _ADC_INIT 076F  
               _ADC_READ 07CC           ?_PWM1_SET_DUTY 0075               _ADCON0bits 001F  
        ??_PWM1_SET_DUTY 0077  
